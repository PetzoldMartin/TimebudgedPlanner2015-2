module org.genesez.example.java.car

var uml2setup = org.genesez.adapter.uml2.workflow.UmlSetup {}
var gcore = org.eclipse.xtend.typesystem.emf.EmfMetaModel {
	metaModelPackage = "org.genesez.metamodel.gcore.GcorePackage"
}
var uml = org.eclipse.xtend.typesystem.uml2.UML2MetaModel {}

Workflow {
	// read the uml2 model file
	component = org.genesez.workflow.EmfReader {
		file = "model/example.uml"
		//file = "model/TBP.uml"
		
		slot = "uml2model"
	}
	// validate the uml2 model for transformability
	component = org.genesez.workflow.xpand.ValidatorComponent {
		metaModel = uml
		slot = "uml2model"
		
		validator = org.genesez.adapter.uml2.workflow.UmlModelValidation {}
		validator = org.genesez.adapter.uml2.workflow.UmlStateMachineValidation {}
		validator = org.genesez.adapter.uml2.workflow.Uml2GcoreStateMachineValidation {}
	}
	// transform the uml2 model into a GeneSEZ model
	component = org.genesez.workflow.xpand.Model2ModelComponent {
		metaModel = uml
		metaModel = gcore
		slot = "uml2model"
		outputSlot = "coremodel"
		
		model2model = org.genesez.adapter.uml2.workflow.Uml2Gcore {
		}
	}
	// prepare gcore model for java source code generation
	component = org.genesez.workflow.xpand.ModelModificationComponent {
		metaModel = gcore
		
		// annotation definition and usage, singleton design pattern and hashCode + equals operations
		model2model = org.genesez.workflow.SimpleScript {
			script = "org::genesez::platform::java::m2m::Prepare::prepare"
		}
		// implement associations using the association library
		model2model = org.genesez.workflow.SimpleScript {
			script = "org::genesez::platform::java::m2m::aop::AssociationLibrary::prepare"
		}
		// cares about property access operations
		model2model = org.genesez.workflow.SimpleScript {
			script = "org::genesez::platform::java::m2m::AccessOperation::prepare"
			parameter = {
				name = "usePropertyVisibilityForAccessors"
				value = false
			}
		}
		// automatically implement abstract and interface operations in classes
		model2model = org.genesez.workflow.SimpleScript {
			script = "org::genesez::metamodel::core::util::m2m::Realization::realize"
		}
		// add necessary use dependencies for import generation
		model2model = org.genesez.workflow.SimpleScript {
			script = "org::genesez::metamodel::core::util::m2m::UseDependencies::addUseDependencies"
		}
	}
	// serialize the GeneSEZ model - just for info if you want to have a look at it
	component = org.genesez.workflow.EmfWriter {
		file = "model/example.xmi"
	}
	// validate the GeneSEZ model against general + java specific constraints
	component = org.genesez.workflow.xpand.ValidatorComponent {
		metaModel = gcore
		validator = org.genesez.workflow.SimpleValidator {
			script = "org::genesez::metamodel::core::util::validation::Constraints"
		}
		validator = org.genesez.workflow.SimpleValidator {
			script = "org::genesez::platform::java::validation::Syntax"
		}
	}
	// run the java code generation and transform the model into java source code
	component = org.genesez.workflow.xpand.Model2TextSupport {
		component = org.genesez.workflow.xpand.Model2TextComponent {
			metaModel = gcore
			
			// directory in which the generated files are placed
			outputDir = "../de.fh-zwickau.dev.java.TBP/src-gen"
			
			importPreserverConfig = org.genesez.platform.java.workflow.JavaImportPreserverConfig {}
			postProcessor = org.genesez.platform.java.workflow.GeneSezJavaPostProcessor {}
			
			/*
			there are several possibilities to specify your type mapping file(s):
			1. You can list all files seperately here; if there are redundant rules 
			the rule in the last specified typemapping file is active (recommended)
			2. You can also include a typemapping file, e.g. the default java typemapping 
			file, into your project specific file. In this case just list your project 
			specific file here; with this solution redundant rules are not overriden by
			the latest specified rule, e.g. in the project specific typemapping file 
			after including another typemapping file. This is an opposing behaviour 
			to the one described in possibility 1.
			*/
			typeMappingFile = "typemapping.xml"
			
			aopTemplate = "org::genesez::platform::java::m2t::aop::AssociationLibrary"
			// adjust default templates using aspects, see XPand AOP-Feature
			aopTemplate = "Attrib"
			// adjust default xtend scripts with aspects, see Xtend AOP-Feature
			aopScript = "Naming"
			
//			aopTemplate = "org::genesez::platform::java::m2t::aop::SystemUserAsAuthor"
//			aopTemplate = "org::genesez::platform::java::m2t::aop::SectionComments"
			
			model2text = org.genesez.platform.java.workflow.Gcore2Java {
				// boolean value indicates if the model name is used as base package or not
				useModelNameAsBasePackage = true
			}
		}
	}
	// enable this to generate the statistics on every generator run
	//component = @org.genesez.example.java.car.statistic {}
}
